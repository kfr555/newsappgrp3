package com.cgi.userservice.controller;

import java.util.Map;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.cgi.userservice.model.User;
import com.cgi.userservice.model.UserLogin;
import com.cgi.userservice.services.SecurityTokenGenerator;
import com.cgi.userservice.services.UserService;
import com.cgi.userservice.vo.News;
import com.cgi.userservice.vo.ResponseTemplateVO;

@RestController
@RequestMapping
@EnableAutoConfiguration
public class UserController {
	@Autowired
	private UserService userService;

	@Autowired
	private SecurityTokenGenerator tokenGenerator;
	@Autowired
	private RestTemplate restTemplate;

	@PostMapping("/api/v1/register")
	public ResponseEntity<?> registerUser(@RequestBody User user) {
		try {
			
			System.out.println(user);
			
			userService.saveUser(user);
			return new ResponseEntity<String>("User registered successfully", HttpStatus.CREATED);
		} catch (Exception e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.CONFLICT);
		}
	}
	@PostMapping("/api/v1/login")
	public ResponseEntity<?> login(@RequestBody User loginDetail) {

		try {

			if (null == loginDetail.getUserId() || null == loginDetail.getPassword()) {
				throw new Exception("User Id or Password canot be empty.");
			}
			User user = userService.findByUserIdAndPassword(loginDetail.getUserId(), loginDetail.getPassword());
			Map<String, String> map = tokenGenerator.generateToken(user);
			return new ResponseEntity<Map<String, String>>(map, HttpStatus.OK);

		} catch (Exception e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.UNAUTHORIZED);
		}
	}
	@GetMapping("/api/v1/{id}")
	public ResponseTemplateVO getUserAndNews(@PathVariable("id") String id) {
		// first get the employee details based on id
		User user = ( this.userService).getUserId(id);
		if (user != null) {
			// Get the department details from the DEPARTMENT-SERVICE by using RestTemplate
			News news = this.restTemplate
					.getForObject("http://FAVOURITE-SERVICE/News/" + news.getNewsId(),News.class);
			ResponseTemplateVO rt = new ResponseTemplateVO();
			if (user != null && news != null) {
				rt.setUser(user);
				rt.setNews(news);
				return rt;
			} else {
				return new ResponseTemplateVO();
			}
		} else {
			return new ResponseTemplateVO();
		}
	}


}
